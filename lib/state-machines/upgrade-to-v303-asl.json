{
  "Comment": "Upgrades link data to v303 version and abo",
  "StartAt": "Only proceed for create/update type",
  "States": {
    "Only proceed for create/update type": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.eventType",
          "StringEquals": "Delete",
          "Next": "Ignore Op"
        }
      ],
      "Default": "Fetch current links"
    },
    "Fetch current links": {
      "Type": "Task",
      "Parameters": {
        "Bucket.$": "$.artefactsBucketName",
        "Prefix": "links_data",
        "MaxKeys": 5
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Next": "Only proceed if there is links data",
      "ResultPath": "$.listObjectsResult",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "BackoffRate": 1.5,
          "IntervalSeconds": 1,
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Catchall",
          "ResultPath": "$.solutionError"
        }
      ]
    },
    "Catchall": {
      "Type": "Pass",
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Only proceed if there is links data": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.listObjectsResult.Contents",
          "IsPresent": true,
          "Next": "Process link data"
        }
      ],
      "Default": "Ignore Op"
    },
    "Process link data": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "Process Link data",
        "States": {
          "Process Link data": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName.$": "$.processLinksFunctionName"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "process.$": "$.Payload.process",
              "oldlinkData.$": "$.Payload.oldlinkData",
              "awsEntityId.$": "$.Payload.awsEntityId",
              "awsEntityType.$": "$.Payload.awsEntityType",
              "awsEntityData.$": "$.Payload.awsEntityData",
              "permissionSetName.$": "$.Payload.permissionSetName",
              "principalName.$": "$.Payload.principalName",
              "principalType.$": "$.Payload.principalType",
              "artefactsBucketName.$": "$.Payload.artefactsBucketName",
              "linksTableName.$": "$.Payload.linksTableName"
            },
            "Next": "Only process if the link is old format"
          },
          "Only process if the link is old format": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.process",
                "BooleanEquals": true,
                "Next": "DynamoDB DeleteItem"
              }
            ],
            "Default": "Ignore new format links"
          },
          "DynamoDB DeleteItem": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:deleteItem",
            "Parameters": {
              "TableName.$": "$.linksTableName",
              "Key": {
                "awsEntityId": {
                  "S.$": "$.oldlinkData"
                }
              }
            },
            "ResultPath": null,
            "Next": "DynamoDB PutItem",
            "Retry": [
              {
                "ErrorEquals": ["States.TaskFailed"],
                "BackoffRate": 1.5,
                "IntervalSeconds": 1,
                "MaxAttempts": 2
              }
            ]
          },
          "DynamoDB PutItem": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName.$": "$.linksTableName",
              "Item": {
                "awsEntityId": {
                  "S.$": "$.awsEntityId"
                },
                "awsEntityType": {
                  "S.$": "$.awsEntityType"
                },
                "awsEntityData": {
                  "S.$": "$.awsEntityData"
                },
                "permissionSetName": {
                  "S.$": "$.permissionSetName"
                },
                "principalName": {
                  "S.$": "$.principalName"
                },
                "principalType": {
                  "S.$": "$.principalType"
                }
              }
            },
            "ResultPath": null,
            "Next": "DeleteObject",
            "Retry": [
              {
                "ErrorEquals": [],
                "BackoffRate": 1.5,
                "IntervalSeconds": 1,
                "MaxAttempts": 2
              }
            ]
          },
          "DeleteObject": {
            "Type": "Task",
            "Parameters": {
              "Bucket.$": "$.artefactsBucketName",
              "Key.$": "States.Format('links_data/{}',$.oldlinkData)"
            },
            "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
            "ResultPath": null,
            "Next": "PutObject",
            "Retry": [
              {
                "ErrorEquals": [],
                "BackoffRate": 1.5,
                "IntervalSeconds": 1,
                "MaxAttempts": 2
              }
            ]
          },
          "PutObject": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "Body": {},
              "Bucket.$": "$.artefactsBucketName",
              "Key.$": "States.Format('links_data/{}',$.awsEntityId)"
            },
            "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
            "Retry": [
              {
                "ErrorEquals": [],
                "BackoffRate": 1.5,
                "IntervalSeconds": 1,
                "MaxAttempts": 2
              }
            ]
          },
          "Ignore new format links": {
            "Type": "Pass",
            "End": true
          }
        }
      },
      "ItemsPath": "$.listObjectsResult.Contents",
      "Parameters": {
        "artefactsBucketName.$": "$.artefactsBucketName",
        "linksTableName.$": "$.linksTableName",
        "oldlinkData.$": "$$.Map.Item.Value.Key",
        "processLinksFunctionName.$": "$.processLinksFunctionName"
      },
      "Next": "Check for NextContinuationToken",
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Catchall",
          "ResultPath": "$.solutionError"
        }
      ]
    },
    "Check for NextContinuationToken": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.listObjectsResult.NextContinuationToken",
          "IsPresent": true,
          "Next": "Fetch current links with ContinuationToken"
        }
      ],
      "Default": "Ignore Op"
    },
    "Fetch current links with ContinuationToken": {
      "Type": "Task",
      "Parameters": {
        "Bucket.$": "$.artefactsBucketName",
        "Prefix": "links_data",
        "MaxKeys": 5,
        "ContinuationToken.$": "$.listObjectsResult.NextContinuationToken"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Next": "Process link data",
      "ResultPath": "$.listObjectsResult",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "BackoffRate": 1.5,
          "IntervalSeconds": 1,
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Catchall",
          "ResultPath": "$.solutionError"
        }
      ]
    },
    "Ignore Op": {
      "Type": "Pass",
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
